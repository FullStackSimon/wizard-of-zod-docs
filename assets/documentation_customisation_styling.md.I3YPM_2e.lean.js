import{_ as t,c as a,a1 as e,o as n}from"./chunks/framework.CsjMFbrD.js";const i="/wizard-of-zod-docs/assets/styling_header_footer_next_light.FDyKJ0mm.png",g=JSON.parse('{"title":"Styling","description":"","frontmatter":{"title":"Styling"},"headers":[],"relativePath":"documentation/customisation/styling.md","filePath":"documentation/customisation/styling.md","lastUpdated":1738503419000}'),l={name:"documentation/customisation/styling.md"},o=i;function h(p,s,r,d,k,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="styling" tabindex="-1">Styling <a class="header-anchor" href="#styling" aria-label="Permalink to &quot;Styling&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>By default, <strong>Wizard of Zod</strong> comes with a clean and polished UI, thanks to <strong>Tailwind CSS</strong> and <strong>shadcn-vue</strong> components. However, we understand that every project has unique styling needs. To provide flexibility, we offer a <a href="./../api/props.html#classes">classes</a> prop that allows developers to customize various parts of the wizard using Tailwind utility classes.</p><h2 id="customizing-styles-with-classes-prop" tabindex="-1">Customizing Styles with <code>classes</code> Prop <a class="header-anchor" href="#customizing-styles-with-classes-prop" aria-label="Permalink to &quot;Customizing Styles with \`classes\` Prop&quot;">​</a></h2><p>The <a href="./../api/props.html#classes">classes</a> prop is an object that allows you to override default styles by providing your own Tailwind utility classes. This gives you full control over the look and feel of the wizard.</p><h3 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h3><p>To customize the wizard header, footer and next button for example, you can pass a <a href="./../api/props.html#classes">classes</a> object like this:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Wizard</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    woz: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w-full&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wozForm: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;space-y-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wozHeader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bg-[#3EB27F] text-white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wozFooter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bg-[#3EB27F] text-white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wozFormButtonNext: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bg-[#3EB27F] text-white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><picture><source srcset="`+o+'" media="(prefers-color-scheme: dark)"><img src="'+i+`" alt="Styling" style="border:1px solid #E8E9ED;border-radius:.5rem;"></picture><p>See the <a href="./../api/types.html#wizardclasses">WizardClasses</a> interface for the shape of this prop.</p><p>Each property (<em>or what I like to call a <strong>styling hook</strong></em>) corresponds to a specific part of the wizard, allowing you to fine-tune its appearance.</p><h2 id="breakdown-of-styling-hooks" tabindex="-1">Breakdown of Styling Hooks <a class="header-anchor" href="#breakdown-of-styling-hooks" aria-label="Permalink to &quot;Breakdown of Styling Hooks&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td><code>woz</code></td><td>Root container styling</td></tr><tr><td><code>wozHeader</code></td><td>Styling for the wizard header</td></tr><tr><td><code>wozBody</code></td><td>Main body of the wizard</td></tr><tr><td><code>wozFormStepper</code></td><td>Step indicator styling</td></tr><tr><td><code>wozFormIntro</code></td><td>Introduction section before form steps begin</td></tr><tr><td><code>wozForm</code></td><td>Styling for the form container</td></tr><tr><td><code>wozFormButtons</code></td><td>Container for the navigation buttons</td></tr><tr><td><code>wozFormButtonPrevious</code></td><td>Previous button styling</td></tr><tr><td><code>wozFormButtonNext</code></td><td>Next button styling</td></tr><tr><td><code>wozProgress</code></td><td>Progress indicator styling</td></tr><tr><td><code>wozPreview</code></td><td>Preview step styling</td></tr><tr><td><code>wozPreviewIntro</code></td><td>Intro text for the preview step</td></tr><tr><td><code>wozFooter</code></td><td>Footer styling</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Have a look at the <a href="./layout.html">layout</a> section to help you visualise where these styling hooks are used.</p></div><h2 id="how-it-works-under-the-hood" tabindex="-1">How It Works Under the Hood <a class="header-anchor" href="#how-it-works-under-the-hood" aria-label="Permalink to &quot;How It Works Under the Hood&quot;">​</a></h2><p>Internally, <strong>Wizard of Zod</strong> applies the provided classes using the <code>cn</code> utility function, ensuring a seamless merge of default styles with user-defined ones. Here&#39;s an example of how the <code>wozFooter</code> class is applied within the <strong>LayoutDefault</strong> template:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woz-footer&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bg-gray-200 w-full p-4 flex justify-center&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, classes?.wozFooter)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;small&gt;&amp;copy; {{ year }}&lt;/small&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><ul><li>The <code>cn</code> function merges the default Tailwind CSS classes with any user-supplied class from <code>classes?.wozFooter</code>.</li><li>If no custom class is provided, the default styles ensure a clean and responsive footer.</li><li>This approach maintains the integrity of the component while allowing for easy overrides.</li></ul><p>This pattern is repeated throughout the component, allowing each section to be customized via the <a href="./../api/props.html#classes">classes</a> prop.</p><h2 id="advanced-customization" tabindex="-1">Advanced Customization <a class="header-anchor" href="#advanced-customization" aria-label="Permalink to &quot;Advanced Customization&quot;">​</a></h2><p>If you need deeper customization, you can combine this with Tailwind CSS features like <code>@apply</code> in your CSS:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.custom-stepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> flex</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justify-between</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items-center</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text-sm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text-gray-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">700;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Then apply it in the component:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Wizard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wozFormStepper: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-stepper&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>With the <a href="./../api/props.html#classes">classes</a> prop, you can easily adapt <strong>Wizard of Zod</strong> to fit your design system while leveraging the power of Tailwind CSS. Whether you need minor tweaks or a completely new look, this flexible approach allows seamless styling customization.</p>`,27)]))}const y=t(l,[["render",h]]);export{g as __pageData,y as default};
