import{_ as i}from"./chunks/basic_dark.BEadkiKD.js";import{_ as a,a as e}from"./chunks/preview_list_light.BONpebLL.js";import{_ as t,c as n,a1 as h,o as l}from"./chunks/framework.CsjMFbrD.js";const r="/wizard-of-zod-docs/assets/given_name_family_name_light.I7Csnujv.png",p="/wizard-of-zod-docs/assets/basic_validation_dark.Df2pWit2.png",o="/wizard-of-zod-docs/assets/given_name_family_name_validation_light.Rq6sL4tF.png",d="/wizard-of-zod-docs/assets/gender_dark.PkghbpPB.png",k="/wizard-of-zod-docs/assets/gender_light.BdKkwgPO.png",c="/wizard-of-zod-docs/assets/age_dark.DDQbVdVL.png",E="/wizard-of-zod-docs/assets/age_light.mKGEMVPc.png",g="/wizard-of-zod-docs/assets/edit_family_name_dark.NKN33Ohi.png",m="/wizard-of-zod-docs/assets/edit_family_name_light.Bpq7z4uj.png",P=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/guide/index.md","filePath":"documentation/guide/index.md","lastUpdated":1738704187000}'),u={name:"documentation/guide/index.md"},y=i,f=p,F=d,w=c,b=e,v=g;function _(C,s,B,x,q,z){return l(),n("div",null,s[0]||(s[0]=[h(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>Wizard of Zod is a Vue component that makes rendering and collecting data from step by step forms easy to implement in any Vue project.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Just want to try it out? Skip to the <a href="./getting-started.html">QuickStart</a>.</p></div><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h2><p>Wizard of Zod was created out of the frustration with the time-consuming task of having to manually create step by step forms for use in touch screen kiosks, websites and other software.</p><p>As a developer, I just wanted to provide a simple schema which would automatically handle form rendering and validation with the end result of collecting well-formed valid data from the user as I expected.</p><h2 id="behind-the-curtain" tabindex="-1">Behind The Curtain <a class="header-anchor" href="#behind-the-curtain" aria-label="Permalink to &quot;Behind The Curtain&quot;">​</a></h2><p>The eureka moment came when I stumbled upon <a href="https://www.shadcn-vue.com/" target="_blank" rel="noreferrer">shadcn-vue.com</a> and particularly their excellent <a href="https://www.shadcn-vue.com/docs/components/auto-form.html" target="_blank" rel="noreferrer">AutoForm</a> component which does most of the magic by taking a <a href="https://zod.dev" target="_blank" rel="noreferrer">Zod schema</a> rendering it as a form and handling validation. Exceptional!</p><p>The following table shows the mapping of Zod schemas to rendered <a href="https://www.shadcn-vue.com/docs/components" target="_blank" rel="noreferrer">shadcn-vue.com components</a>.</p><table tabindex="0"><thead><tr><th>Zod Schema</th><th>Shadcn-vue.com Component</th></tr></thead><tbody><tr><td>boolean</td><td><a href="https://www.shadcn-vue.com/docs/components/checkbox.html" target="_blank" rel="noreferrer">Checkbox</a> or <a href="https://www.shadcn-vue.com/docs/components/switch.html" target="_blank" rel="noreferrer">Switch</a></td></tr><tr><td>number</td><td><a href="https://www.shadcn-vue.com/docs/components/number-field.html" target="_blank" rel="noreferrer">NumberField</a></td></tr><tr><td>string</td><td><a href="https://www.shadcn-vue.com/docs/components/input.html" target="_blank" rel="noreferrer">Input</a> or <a href="https://www.shadcn-vue.com/docs/components/textarea.html" target="_blank" rel="noreferrer">Textarea</a></td></tr><tr><td>file</td><td><a href="https://www.shadcn-vue.com/docs/components/input.html#file" target="_blank" rel="noreferrer">File Input</a></td></tr><tr><td>date</td><td><a href="https://www.shadcn-vue.com/docs/components/date-picker.html" target="_blank" rel="noreferrer">Datepicker</a></td></tr><tr><td>enum</td><td><a href="https://www.shadcn-vue.com/docs/components/select.html" target="_blank" rel="noreferrer">Select</a> or <a href="https://www.shadcn-vue.com/docs/components/radio-group.html" target="_blank" rel="noreferrer">Radio Group</a></td></tr></tbody></table><p>You can also provide a custom component of your own for any schema. Read more about that over at <a href="https://www.shadcn-vue.com/docs/components/auto-form.html#component" target="_blank" rel="noreferrer">shadcn-vue.com</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you&#39;re new to Zod, it might seem daunting at first but trust me - once you get it you won&#39;t want to handle validation any other way!</p></div><h2 id="a-simple-example" tabindex="-1">A Simple Example <a class="header-anchor" href="#a-simple-example" aria-label="Permalink to &quot;A Simple Example&quot;">​</a></h2><p>Simply provide an array of Zod Schemas (<em>which will be treated as individual forms</em>) and Wizard of Zod will present them as a step-by-step form wizard... hence the name &quot;<strong>Wizard of Zod</strong>&quot;!</p><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h3><p>This example presents a form wizard with 3 steps (forms).</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { z } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zod&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Wizard, { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Form } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wizard-of-zod&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> forms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ZodObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      schema: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        givenName: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        familyName: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      schema: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gender: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;female&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      schema: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        age: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleCompleted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h-screen flex justify-center items-center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Wizard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        woz: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w-1/3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        wozForm: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;space-y-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        wozPreview: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gap-4&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handleCompleted</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>I just added some <code>classes</code> here for demonstration purposes. You can add your own or completely omit them.</p><h3 id="resulting-screenshots" tabindex="-1">Resulting Screenshots <a class="header-anchor" href="#resulting-screenshots" aria-label="Permalink to &quot;Resulting Screenshots&quot;">​</a></h3><h4 id="step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h4><p>The first form contains a Zod schema with two <code>string</code> fields so two text input fields are rendered.</p><p>Notice that on the first step, the <code>Previous</code> button is disabled.</p><picture><source srcset="`+y+'" media="(prefers-color-scheme: dark)"><img src="'+r+'" alt="Step 1" class="img-border"></picture><h4 id="validation-error" tabindex="-1">Validation Error <a class="header-anchor" href="#validation-error" aria-label="Permalink to &quot;Validation Error&quot;">​</a></h4><p>If a validation error occurs, the associated error message is shown under the field. The <code>color</code> of both the field label and error message is set to <code>text-red-500</code>.</p><p>See the <a href="https://zod.dev/" target="_blank" rel="noreferrer">Zod.dev</a> docs for instructions on how to provide custom error messages.</p><p>Navigation to the next step in the wizard is prevented when there is a validation error on the current step.</p><picture><source srcset="'+f+'" media="(prefers-color-scheme: dark)"><img src="'+o+'" alt="Step 1" class="img-border"></picture><h4 id="step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2" aria-label="Permalink to &quot;Step 2&quot;">​</a></h4><p>The second form contains a Zod schema with one <code>enum</code> field (containing 2 values). As a result a select box is rendered containing 2 options.</p><picture><source srcset="'+F+'" media="(prefers-color-scheme: dark)"><img src="'+k+'" alt="Step 2" class="img-border"></picture><h4 id="step-3" tabindex="-1">Step 3 <a class="header-anchor" href="#step-3" aria-label="Permalink to &quot;Step 3&quot;">​</a></h4><p>The last form contains a Zod schema with a <code>number</code> field. As a result, a number input is rendered by default.</p><picture><source srcset="'+w+'" media="(prefers-color-scheme: dark)"><img src="'+E+'" alt="Step 3" class="img-border"></picture><h4 id="preview" tabindex="-1">Preview <a class="header-anchor" href="#preview" aria-label="Permalink to &quot;Preview&quot;">​</a></h4><p>The following screenshot shows the <code>list</code> preview. Here the questions and answers are shown in a vertical list, with each form being separated by a divider.</p><p>Notice that the first two questions are grouped into a single section (with no divider between them). This is because this particular schema contains two fields in one form.</p><picture><source srcset="'+b+'" media="(prefers-color-scheme: dark)"><img src="'+a+'" alt="Preview (List)" class="img-border"></picture><p>If the user clicks the <strong>Cancel</strong> button here, the form is completely reset, the answers are discarded and the user is sent back to the first step.</p><p>If the user clicks the <strong>Submit</strong> button, the <code>completed</code> event is emitted with the resulting data (key:value) (question:answer) pairs in its payload.</p><h4 id="edit" tabindex="-1">Edit <a class="header-anchor" href="#edit" aria-label="Permalink to &quot;Edit&quot;">​</a></h4><p>Clicking the pencil icon for any answer takes the user to the edit screen where a single form field (for that specific question) is presented to the user who can now edit their answer.</p><p>Clicking the <strong>Update</strong> button returns the user to the preview with the answer updated.</p><picture><source srcset="'+v+'" media="(prefers-color-scheme: dark)"><img src="'+m+`" alt="Edit" class="img-border"></picture><h3 id="resulting-data" tabindex="-1">Resulting Data <a class="header-anchor" href="#resulting-data" aria-label="Permalink to &quot;Resulting Data&quot;">​</a></h3><p>The data payload available in the <code>@completed</code> event will contain the answers provided by the user.</p><p>So, for the above simple example you will receive an object like this for example:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  givenName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// From Step 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  familyName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// From Step 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  gender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// From Step 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// From Step 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>It is up to you what you do with the collected data from there!</p><h2 id="more-examples" tabindex="-1">More Examples <a class="header-anchor" href="#more-examples" aria-label="Permalink to &quot;More Examples&quot;">​</a></h2><p>Use the <strong>Examples</strong> menu in the sidebar to view more examples.</p>`,51)]))}const I=t(u,[["render",_]]);export{P as __pageData,I as default};
